dist: trusty
sudo: require

languge: cpp

# Do not build branches of the form "pr/*". By prefixing pull requests coming
# from branches inside the repository with pr/, this avoids building both the
# branch push _and_ the pull request.
branches:
  except: /pr\/.*/


addons:
  apt:
    sources: &sources
      - ubuntu-toolchain-r-test
    packages:
      - valgrind
      - gcc-6
      - g++-6
      - make
      - libjsoncpp-dev
      #- cmake
      #- libboost-all-dev
      #- libprotobuf-dev

cache:
  directories:
    - ${TRAVIS_BUILD_DIR}/deps/llvm-3.6.2
    - ${TRAVIS_BUILD_DIR}/deps/llvm-3.7.1
    - ${TRAVIS_BUILD_DIR}/deps/llvm-3.8.0
    - ${TRAVIS_BUILD_DIR}/deps/llvm-3.9.0
    - ${TRAVIS_BUILD_DIR}/deps/boost-1.59.0
    - ${TRAVIS_BUILD_DIR}/deps/boost-1.60.0
    - ${TRAVIS_BUILD_DIR}/deps/boost-1.61.0
    - ${TRAVIS_BUILD_DIR}/deps/boost-1.62.0
    - ${TRAVIS_BUILD_DIR}/deps/boost-1.63.0
    - ${TRAVIS_BUILD_DIR}/deps/protobuf-v3.4.0

matrix:
  include:
    # GCC=6, Boost=default
    - os: linux
      env: UNIT_TESTS=true COMPILER=g++-6 ENABLE_MEMCHECK=true BOOST_VERSION=default BOOST_BUILD=true PROTOBUF_VERSION=default
      compiler: gcc

    - os: osx
      env: UNIT_TESTS=true COMPILER=g++ BOOST_VERSION=default BOOST_BUILD=true PROTOBUF_VERSION=default
      osx_image: xcode8.3.3
      compiler: gcc

  allow_failures:
      # - env: UNIT_TESTS=true LLVM_VERSION=trunk BOOST_VERSION=default
      - env: UNIT_TESTS=true LLVM_VERSION=default BOOST_VERSION=trunk

install:
  - echo =[INSTALL]===========================================================
  ############################################################################
  # All the dependencies are installed in ${TRAVIS_BUILD_DIR}/deps/
  ############################################################################
  - |
    DEPS_DIR="${TRAVIS_BUILD_DIR}/deps"
    mkdir -p ${DEPS_DIR} && cd ${DEPS_DIR}

  ############################################################################
  # Setup default versions and override compiler if needed
  ############################################################################
  - if [[ "${LLVM_VERSION}" == "default" ]]; then LLVM_VERSION=3.9.0; fi
  - if [[ "${BOOST_VERSION}" == "default" ]]; then BOOST_VERSION=1.63.0; fi
  - if [[ "${PROTOBUF_VERSION}" == "default" ]]; then PROTOBUF_VERSION=3.4.0; fi

  - if [[ "${COMPILER}" != "" ]]; then export CXX=${COMPILER}; fi

  ############################################################################
  # Defines components variables
  ############################################################################
  - |
    BOOST_DIR=${DEPS_DIR}/boost-${BOOST_VERSION}
    BOOST_DIR_DOWNLOAD=${BOOST_DIR}_download
    LLVM_DIR=${DEPS_DIR}/llvm-${LLVM_VERSION}
    LLVM_DIR_DOWNLOAD=${LLVM_DIR}_download
    PROTOBUF_DIR=${DEPS_DIR}/protobuf-v${PROTOBUF_VERSION}
    PROTOBUF_DIR_DOWNLOAD=${PROTOBUF_DIR}_download

  ############################################################################
  # If you want remove all caches, just uncomment below commands
  ############################################################################
  - |
    rm -rf ${BOOST_DIR}
    rm -rf ${LLVM_DIR}
    rm -rf ${PROTOBUF_DIR}

  ############################################################################
  # Install a recent CMake
  ############################################################################
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      CMAKE_URL="https://cmake.org/files/v3.9/cmake-3.9.1-Linux-x86_64.tar.gz"
      mkdir cmake && travis_retry wget --no-check-certificate --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake
      export PATH=${DEPS_DIR}/cmake/bin:${PATH}
    else
      brew install cmake || brew upgrade cmake
    fi
  - cmake --version

  ############################################################################
  # Install Clang, libc++ and libc++abi
  ############################################################################
  - |
    if [[ "${LLVM_VERSION}" != "" ]]; then
      if [[ -z "$(ls -A ${LLVM_DIR})" ]]; then
        LLVM_URL="http://llvm.org/releases/${LLVM_VERSION}/llvm-${LLVM_VERSION}.src.tar.xz"
        LIBCXX_URL="http://llvm.org/releases/${LLVM_VERSION}/libcxx-${LLVM_VERSION}.src.tar.xz"
        LIBCXXABI_URL="http://llvm.org/releases/${LLVM_VERSION}/libcxxabi-${LLVM_VERSION}.src.tar.xz"
        CLANG_URL="http://llvm.org/releases/${LLVM_VERSION}/clang+llvm-${LLVM_VERSION}-x86_64-linux-gnu-ubuntu-14.04.tar.xz"
        mkdir -p ${LLVM_DIR_DOWNLOAD} ${LLVM_DIR_DOWNLOAD}/build ${LLVM_DIR_DOWNLOAD}/projects/libcxx ${LLVM_DIR_DOWNLOAD}/projects/libcxxabi ${LLVM_DIR_DOWNLOAD}/clang
        travis_retry wget --quiet -O - ${LLVM_URL}      | tar --strip-components=1 -xJ -C ${LLVM_DIR_DOWNLOAD}
        travis_retry wget --quiet -O - ${LIBCXX_URL}    | tar --strip-components=1 -xJ -C ${LLVM_DIR_DOWNLOAD}/projects/libcxx
        travis_retry wget --quiet -O - ${LIBCXXABI_URL} | tar --strip-components=1 -xJ -C ${LLVM_DIR_DOWNLOAD}/projects/libcxxabi
        travis_retry wget --quiet -O - ${CLANG_URL}     | tar --strip-components=1 -xJ -C ${LLVM_DIR_DOWNLOAD}/clang
        (cd ${LLVM_DIR_DOWNLOAD}/build && cmake .. -DCMAKE_INSTALL_PREFIX=${LLVM_DIR_DOWNLOAD}/install -DCMAKE_CXX_COMPILER=clang++)
        (cd ${LLVM_DIR_DOWNLOAD}/build/projects/libcxx && make install -j2)
        (cd ${LLVM_DIR_DOWNLOAD}/build/projects/libcxxabi && make install -j2)

        cd ${DEPS_DIR}
        mv ${LLVM_DIR_DOWNLOAD} ${LLVM_DIR}
      fi
      export CXXFLAGS="-nostdinc++ -isystem ${LLVM_DIR}/install/include/c++/v1"
      export LDFLAGS="-L ${LLVM_DIR}/install/lib -l c++ -l c++abi"
      export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${LLVM_DIR}/install/lib"
      export PATH="${LLVM_DIR}/clang/bin:${PATH}"
    fi
  - ${CXX} --version

  ############################################################################
  # Download Boost
  ############################################################################
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      if [[ "${BOOST_VERSION}" != "" ]]; then
        if [[ -z "$(ls -A ${BOOST_DIR})" ]]; then
          if [[ "${BOOST_VERSION}" == "trunk" ]]; then
            BOOST_URL="http://github.com/boostorg/boost.git"
            travis_retry git clone --depth 1 --recursive --quiet ${BOOST_URL} ${BOOST_DIR_DOWNLOAD} || exit 1
          else
            BOOST_URL="http://dl.bintray.com/boostorg/release/${BOOST_VERSION}/source/boost_${BOOST_VERSION//\./_}.tar.gz"
            mkdir -p ${BOOST_DIR_DOWNLOAD}
            { travis_retry wget --quiet -O - ${BOOST_URL} | tar --strip-components=1 -xz -C ${BOOST_DIR_DOWNLOAD}; } || exit 1
          fi

          mv ${BOOST_DIR_DOWNLOAD} ${BOOST_DIR}

          # Make sure we don't conflict with the Hana shipped with Boost
          rm -rf ${BOOST_ROOT}/include/boost/{hana,hana.hpp}
        fi
      fi
    fi

  ############################################################################
  # Install Boost.Build
  ############################################################################
  - |
    if [[ "${TRAVIS_OS_NAME}" == "osx" ]]; then
      brew install boost || brew upgrade boost
    fi

  - |
    if [ "${TRAVIS_OS_NAME}" == "linux" ] && [ "${BOOST_BUILD}" == "true" ]; then
      pushd ${BOOST_DIR}
      travis_wait 30 ./bootstrap.sh
      travis_wait 30 sudo ./b2 threading=multi -d0 install
      popd
    fi


  ############################################################################
  # Install Jsoncpp.Build
  ############################################################################
  - |
    if [[ "${TRAVIS_OS_NAME}" == "osx" ]]; then
      brew install jsoncpp || brew upgrade jsoncpp
    fi

  ############################################################################
  # Install Protobuf
  ############################################################################
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      if [[ -z "$(ls -A ${PROTOBUF_DIR})" ]]; then
        PROTOBUF_URL="https://github.com/google/protobuf/releases/download/v${PROTOBUF_VERSION}/protobuf-cpp-${PROTOBUF_VERSION}.tar.gz"
        mkdir -p ${PROTOBUF_DIR_DOWNLOAD}
        { travis_retry wget --quiet -O - ${PROTOBUF_URL} | tar --strip-components=1 -xz -C ${PROTOBUF_DIR_DOWNLOAD}; } || exit 1

        pushd ${PROTOBUF_DIR_DOWNLOAD}
        ./autogen.sh
        ./configure --prefix=/usr
        make -s
        popd

        mv ${PROTOBUF_DIR_DOWNLOAD} ${PROTOBUF_DIR}
      fi

      pushd ${PROTOBUF_DIR}
      sudo make install
      popd

    elif [[ "${TRAVIS_OS_NAME}" == "osx" ]]; then
      brew install protobuf
    fi


  ############################################################################
  # Install a recent Doxygen
  ############################################################################
  - |
    if [[ "${DOCUMENTATION}" == "true" ]]; then
      DOXYGEN_URL="http://ftp.stack.nl/pub/users/dimitri/doxygen-1.8.11.linux.bin.tar.gz"
      mkdir doxygen && travis_retry wget --quiet -O - ${DOXYGEN_URL} | tar --strip-components=1 -xz -C doxygen
      export PATH=${DEPS_DIR}/doxygen/bin:${PATH}
      doxygen --version
    fi
  ############################################################################
  # Install and use a more recent Ruby and install the gems for the benchmarks
  ############################################################################
  - rvm use 2.1 --install --binary --fuzzy
  - gem install ruby-progressbar tilt

  ############################################################################
  # Install tools to check for code formatting errors (run on OS X only)
  ############################################################################
  - |
    if [[ "${CHECK_FORMATTING}" == "true" ]]; then
      brew install pcre || brew upgrade pcre || exit 1
      brew install vera++ || brew upgrade vera++ || exit 1
    fi

before_script:
  ############################################################################
  # Set the git identity (for pushing the documentation and the benchmarks)
  ############################################################################
  - git config --global user.name "Travis bot"
  - git config --global user.email "<>"

  ############################################################################
  # Linking Compilers
  ############################################################################
  # Link gcc-6 and g++-6 to their standard commands
  #- ln -s /usr/bin/gcc-6 /usr/local/bin/gcc
  #- ln -s /usr/bin/g++-6 /usr/local/bin/g++
  # Export CC and CXX to tell cmake which compiler to use
  #- export CC=/usr/bin/gcc-6
  #- export CXX=/usr/bin/g++-6
  # Check versions of gcc, g++ and cmake
  - gcc -v && g++ -v && cmake --version

  ############################################################################
  # Go back to the root of the project and setup the build directory
  ############################################################################
  - cd ${TRAVIS_BUILD_DIR}
  - cmake . ${CMAKE_OPTIONS}

script:
  # Run your build commands next
  - make
  - ctest
  - cpack
